diff --git a/affiliates_connect_flipkart.routing.yml b/affiliates_connect_flipkart.routing.yml
index 57e2af4..74f5764 100644
--- a/affiliates_connect_flipkart.routing.yml
+++ b/affiliates_connect_flipkart.routing.yml
@@ -8,7 +8,7 @@ affiliates_connect_flipkart.settings:
   options:
     _admin_route: TRUE
 
-affiliates_connect_flipkart.batch_fetching:
+affiliates_connect_flipkart.batch_import:
   path: 'admin/config/affiliates-connect-flipkart/batch-processing'
   defaults:
     _title: 'Affiliates Connect Flipkart'
diff --git a/src/Controller/FlipkartNativeController.php b/src/Controller/FlipkartNativeController.php
index 6a258ce..6f4b15a 100644
--- a/src/Controller/FlipkartNativeController.php
+++ b/src/Controller/FlipkartNativeController.php
@@ -1,5 +1,6 @@
 <?php
 
+
 namespace Drupal\affiliates_connect_flipkart\Controller;
 
 use Drupal\Core\Controller\ControllerBase;
@@ -55,6 +56,11 @@ class FlipkartNativeController extends ControllerBase {
       drupal_set_message($this->t('Configure flipkart native api to import data'), 'error', FALSE);
       return $this->redirect('affiliates_connect_flipkart.settings');
     }
+
+    if (!$this->config('affiliates_connect_flipkart.settings')->get('data_storage')) {
+      drupal_set_message($this->t('Enable Data Storage for storing data'), 'error', FALSE);
+      return $this->redirect('affiliates_connect_flipkart.settings');
+    }
     $params = $request->query->all();
     $category = $params['category'];
     $batch = [];
@@ -171,7 +177,8 @@ class FlipkartNativeController extends ControllerBase {
 
     foreach ($products_data['products'] as $key => $value) {
       try {
-        Self::createOrUpdate($value, $config);
+        $product = Self::buildImportData($value);
+        AffiliatesProduct::createOrUpdate($product, $config);
       }
       catch (Exception $e) {
         echo $e->getMessage();
@@ -180,87 +187,37 @@ class FlipkartNativeController extends ControllerBase {
   }
 
   /**
-   * Create if not found else update the existing.
+   * To create a product array with appropriate key-value pair.
+   *
+   * @param array $product_data
+   *
+   * @return array
    *
-   * @param array $value
-   *  product data
-   * @param ImmutableConfig $config
-   *  configuration of the plugin
    */
-  public function createOrUpdate(array $value, ImmutableConfig $config)
-  {
-    $product_id = $value['productBaseInfoV1']['productId'];
-    $nodes = \Drupal::entityTypeManager()
-      ->getStorage('affiliates_product')
-      ->loadByProperties(['product_id' => $product_id]);
-    $product = reset($nodes);
-
-    if (!$product) {
-      $product = AffiliatesProduct::create([
-        'uid' => \Drupal::currentUser()->id(),
-        'name' => $value['productBaseInfoV1']['title'],
-        'plugin_id' => 'affiliates_connect_flipkart',
-        'product_id' => $value['productBaseInfoV1']['productId'],
-        'product_description' => $value['productBaseInfoV1']['productDescription'],
-        'image_urls' => $value['productBaseInfoV1']['imageUrls']['400x400'],
-        'product_family' => $value['productBaseInfoV1']['categoryPath'],
-        'currency' => $value['productBaseInfoV1']['maximumRetailPrice']['currency'],
-        'maximum_retail_price' => $value['productBaseInfoV1']['maximumRetailPrice']['amount'],
-        'vendor_selling_price' => $value['productBaseInfoV1']['flipkartSellingPrice']['amount'],
-        'vendor_special_price' => $value['productBaseInfoV1']['flipkartSpecialPrice']['amount'],
-        'product_url' => $value['productBaseInfoV1']['productUrl'],
-        'product_brand' => $value['productBaseInfoV1']['productBrand'],
-        'in_stock' => $value['productBaseInfoV1']['inStock'],
-        'cod_available' => $value['productBaseInfoV1']['codAvailable'],
-        'discount_percentage' => $value['productBaseInfoV1']['discountPercentage'],
-        'offers' => implode(',', $value['productBaseInfoV1']['offers']),
-        'size' => $value['productBaseInfoV1']['attributes']['size'],
-        'color' => $value['productBaseInfoV1']['attributes']['color'],
-        'seller_name' => $value['productShippingInfoV1']['sellerName'],
-        'seller_average_rating' => $value['productShippingInfoV1']['sellerAverageRating'],
-        'additional_data' => '',
-        'status' => 1,
-      ]);
-      $product->save();
-      return;
-    }
-    if ($config->get('full_content')) {
-      $product->setName($value['productBaseInfoV1']['title']);
-      $product->setProductDescription($value['productBaseInfoV1']['productDescription']);
-      $product->setImageUrls($value['productBaseInfoV1']['imageUrls']['400x400']);
-      $product->setCurrency($value['productBaseInfoV1']['maximumRetailPrice']['currency']);
-      $product->setMaximumRetailPrice($value['productBaseInfoV1']['maximumRetailPrice']['amount']);
-      $product->setVendorSellingPrice($value['productBaseInfoV1']['flipkartSellingPrice']['amount']);
-      $product->setVendorSpecialPrice($value['productBaseInfoV1']['flipkartSpecialPrice']['amount']);
-      $product->setProductUrl($value['productBaseInfoV1']['productUrl']);
-      $product->setProductAvailability($value['productBaseInfoV1']['inStock']);
-      $product->setProductCodAvailability($value['productBaseInfoV1']['codAvailable']);
-      $product->setDiscount($value['productBaseInfoV1']['discountPercentage']);
-      $product->setOffers(implode(',', $value['productBaseInfoV1']['offers']));
-      $product->setSize($value['productBaseInfoV1']['attributes']['size']);
-      $product->setColor($value['productBaseInfoV1']['attributes']['color']);
-      $product->setSellerName($value['productShippingInfoV1']['sellerName']);
-      $product->setSellerAverageRating($value['productShippingInfoV1']['sellerAverageRating']);
-    }
-    if ($config->get('price')) {
-      $product->setCurrency($value['productBaseInfoV1']['maximumRetailPrice']['currency']);
-      $product->setMaximumRetailPrice($value['productBaseInfoV1']['maximumRetailPrice']['amount']);
-      $product->setVendorSellingPrice($value['productBaseInfoV1']['flipkartSellingPrice']['amount']);
-      $product->setVendorSpecialPrice($value['productBaseInfoV1']['flipkartSpecialPrice']['amount']);
-      $product->setDiscount($value['productBaseInfoV1']['discountPercentage']);
-    }
-    if ($config->get('available')) {
-      $product->setProductAvailability($value['productBaseInfoV1']['inStock']);
-    }
-    if ($config->get('size')) {
-      $product->setSize($value['productBaseInfoV1']['attributes']['size']);
-    }
-    if ($config->get('color')) {
-      $product->setColor($value['productBaseInfoV1']['attributes']['color']);
-    }
-    if ($config->get('offers')) {
-      $product->setOffers(implode(',', $value['productBaseInfoV1']['offers']));
-    }
-    $product->save();
+  public function buildImportData($product_data) {
+    $product = [
+      'name' => $product_data['productBaseInfoV1']['title'],
+      'plugin_id' => 'affiliates_connect_flipkart',
+      'product_id' => $product_data['productBaseInfoV1']['productId'],
+      'product_description' => $product_data['productBaseInfoV1']['productDescription'],
+      'image_urls' => $product_data['productBaseInfoV1']['imageUrls']['400x400'],
+      'product_family' => $product_data['productBaseInfoV1']['categoryPath'],
+      'currency' => $product_data['productBaseInfoV1']['maximumRetailPrice']['currency'],
+      'maximum_retail_price' => $product_data['productBaseInfoV1']['maximumRetailPrice']['amount'],
+      'vendor_selling_price' => $product_data['productBaseInfoV1']['flipkartSellingPrice']['amount'],
+      'vendor_special_price' => $product_data['productBaseInfoV1']['flipkartSpecialPrice']['amount'],
+      'product_url' => $product_data['productBaseInfoV1']['productUrl'],
+      'product_brand' => $product_data['productBaseInfoV1']['productBrand'],
+      'in_stock' => $product_data['productBaseInfoV1']['inStock'],
+      'cod_available' => $product_data['productBaseInfoV1']['codAvailable'],
+      'discount_percentage' => $product_data['productBaseInfoV1']['discountPercentage'],
+      'offers' => implode(',', $product_data['productBaseInfoV1']['offers']),
+      'size' => $product_data['productBaseInfoV1']['attributes']['size'],
+      'color' => $product_data['productBaseInfoV1']['attributes']['color'],
+      'seller_name' => $product_data['productShippingInfoV1']['sellerName'],
+      'seller_average_rating' => $product_data['productShippingInfoV1']['sellerAverageRating'],
+      'additional_data' => '',
+    ];
+    return $product;
   }
 }
diff --git a/src/FlipkartCategories.php b/src/FlipkartCategories.php
index c73542c..57ba5ef 100644
--- a/src/FlipkartCategories.php
+++ b/src/FlipkartCategories.php
@@ -7,7 +7,7 @@ namespace Drupal\affiliates_connect_flipkart;
  */
 class FlipkartCategories {
 
-  public static function getCategories() {
+  public function getCategories() {
     $categories = [
       'desktops' => 'Desktops',
       'fragrances' => 'Fragrances',
diff --git a/src/Form/AffiliatesFlipkartSettingsForm.php b/src/Form/AffiliatesFlipkartSettingsForm.php
index 5c1cd63..3c3ae60 100644
--- a/src/Form/AffiliatesFlipkartSettingsForm.php
+++ b/src/Form/AffiliatesFlipkartSettingsForm.php
@@ -109,7 +109,7 @@ class AffiliatesFlipkartSettingsForm extends AffiliatesConnectSettingsForm {
 
     $form['flipkart_settings']['native_api_form']['data_storage_form'] = [
       '#type' => 'details',
-      '#title' => $this->t('Plugin Storage'),
+      '#title' => $this->t('Plugin Update'),
       '#open' => TRUE,
       '#states' => [
         "visible" => [
@@ -217,7 +217,7 @@ class AffiliatesFlipkartSettingsForm extends AffiliatesConnectSettingsForm {
       $category = [
         'category' => $values['categories']
       ];
-      $form_state->setRedirect('affiliates_connect_flipkart.batch_fetching', $category);
+      $form_state->setRedirect('affiliates_connect_flipkart.batch_import', $category);
     }
   }
 
